generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum MailingStatus {
    PROCESSING
    COMPLETED
    CANCELLED
}

model Profile {
    id        String     @id @default(uuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    email     String     @unique
    password  String
    tgId      String?
    banned    DateTime?
    Mailing   Mailing[]
    Invite    Invite[]
    Role      Role       @default(USER)
    Recovery  Recovery[]
}

model Invite {
    id          String   @id @default(uuid())
    token       String   @unique
    email       String   @unique
    initiator   Profile  @relation(fields: [initiatorId], references: [id])
    initiatorId String
    createdAt   DateTime @default(now())
    expiresAt   DateTime
}

model Mailing {
    id              String          @id @default(uuid())
    recipients      Int[]
    message         String
    status          MailingStatus   @default(PROCESSING)
    failed          Int             @default(0)
    total           Int             @default(0)
    senderId        String
    createdAt       DateTime        @default(now())
    statusChangedAt DateTime        @default(now())
    sender          Profile         @relation(fields: [senderId], references: [id])
    MailingGroups   MailingGroups[]
}

model MailingGroups {
    id         String  @id @default(uuid())
    groupId    String
    recipients Int     @default(0)
    mailingId  String
    mailing    Mailing @relation(fields: [mailingId], references: [id])
}

model Recovery {
    id        String   @id @default(uuid())
    token     String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime
    profileId String
    profile   Profile  @relation(fields: [profileId], references: [id])
}
